{"version":3,"sources":["../../src/controller/foodtruck.js"],"names":["config","db","api","post","authenticate","req","res","newFoodTruck","FoodTruck","name","body","foodtype","avgcost","geometry","coordinates","lat","long","save","err","send","json","message","get","find","foodtrucks","findById","params","id","foodtruck","put","delete","status","remove","_id","Review","review","newReview","title","text","reviews","push"],"mappings":"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","file":"foodtruck.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport FoodTruck from '../model/foodtruck';\nimport Review from '../model/review';\n\nimport { authenticate } from '../middleware/authMiddleware';\n\nexport default({ config, db }) => {\n  let api = Router();\n\n  // '/v1/foodtruck/add' - create\n  api.post('/add', authenticate, (req, res) => {\n    let newFoodTruck = new FoodTruck();\n    newFoodTruck.name = req.body.name;\n    newFoodTruck.foodtype = req.body.foodtype;\n    newFoodTruck.avgcost = req.body.avgcost;\n    newFoodTruck.geometry.coordinates.lat = req.body.geometry.coordinates.lat;\n    newFoodTruck.geometry.coordinates.long = req.body.geometry.coordinates.long;\n\n    newFoodTruck.save(err => {\n      if (err) {\n        res.send(err);\n      }\n      res.json({message: 'FoodTruck saved successfully.'});\n    });\n  });\n\n  // '/v1/foodtruck/' - read\n  api.get('/', (req, res) => {\n    FoodTruck.find({}, (err, foodtrucks) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(foodtrucks);\n    });\n  });\n\n  // '/v1/foodtruck/:id' - read 1\n  api.get('/:id', (req, res) => {\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(foodtruck);\n    });\n  });\n\n  // '/v1/foodtruck/:id' - Update\n  api.put('/:id', authenticate, (req, res) => {\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\n      if (err) {\n        res.send(err);\n      }\n      foodtruck.name = req.body.name\n      foodtruck.foodtype = req.body.foodtype;\n      foodtruck.avgcost = req.body.avgcost;\n      foodtruck.geometry.coordinates.lat = req.body.geometry.coordinates.lat;\n      foodtruck.geometry.coordinates.long = req.body.geometry.coordinates.long;\n      foodtruck.save(err => {\n        if (err) {\n          res.send(err);\n        }\n        res.json({ message: \"FoodTruck info updated.\" });\n      });\n    });\n  });\n\n  // '/v1/foodtruck/:id' - Delete\n  api.delete('/:id', authenticate, (req, res) => {\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\n      if (err) {\n        res.status(500).send(err);\n        return;\n      }\n      if (foodtruck == null) {\n        res.status(404).send(\"Food truck not found.\");\n        return;\n      }\n      FoodTruck.remove({\n        _id: req.params.id\n      }, (err, foodtruck) => {\n        if (err) {\n          res.status(500).send(err);\n          return;\n        }\n        Review.remove({\n          foodtruck: req.params.id\n        }, (err, review) => {\n          if (err) {\n            res.send(err);\n          }\n          res.json({ message: \"Food truck and reviews successfully removed.\" });\n        });\n      });\n    });\n  });\n\n  // add review for a specific food truck id\n  // '/v1/foodtruck/reviews/add/:id'\n  api.post('/reviews/add/:id', authenticate, (req, res) => {\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\n      if (err) {\n        res.send(err);\n      }\n      let newReview = new Review();\n\n      newReview.title = req.body.title;\n      newReview.text = req.body.text;\n      newReview.foodtruck = foodtruck._id;\n      newReview.save((err, review) => {\n        if (err) {\n          res.send(err);\n        }\n        foodtruck.reviews.push(newReview);\n        foodtruck.save(err => {\n          if (err) {\n            res.send(err);\n          }\n          res.json({ message: 'Food truck review saved.' });\n        });\n      });\n    });\n  });\n\n  // get reviews for specific food truck\n  // '/v1/foodtruck/reviews/:id'\n  api.get('/reviews/:id', (req, res) => {\n    Review.find({foodtruck: req.params.id}, (err, reviews) => {\n        if (err) {\n          res.send(err);\n        }\n        res.json(reviews);\n    });\n  });\n\n  // find foodtrucks by foodtype\n  // '/v1/foodtruck/foodtype/:foodtype'\n  api.get('/foodtype/:foodtype', (req, res) => {\n    FoodTruck.find({foodtype: req.params.foodtype}, (err, foodtype) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(foodtype);\n    });\n  });\n\n  // find foodtrucks by avg cost\n  // '/v1/foodtruck/foodtype/:foodtype'\n  // api.get('/avgcost/:avgcost', (req, res) => {\n  //   FoodTruck.find({avgcost: req.params.avgcost}, (err, avgcost) => {\n  //     if (err) {\n  //       res.send(err);\n  //     }\n  //     if (avgcost <= req.params.avgcost) {\n  //       res.json(avgcost);\n  //     } else {\n  //       res.send({ message: \"No trucks found.\" });\n  //     }\n  //   });\n  // });\n\n  return api;\n}\n"]}